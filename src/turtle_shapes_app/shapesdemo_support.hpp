/** ==================================================================
 * shapesdemo_support.hpp
 * Class for interfacing a native Connext DDS application with the 
 *  ROS 2 visualization_msgs::msg::dds_::Marker_ data type.
 * This program uses the C++11 option of RTIDDSGen, using the type
 *  support source code generated by the command line:
 *   rtiddsgen -language C++11 <arch> cros2_types.idl
 **/

#ifndef __SHAPESDEMO_SUPPORT_HPP__
#define __SHAPESDEMO_SUPPORT_HPP__
#include <dds/pub/ddspub.hpp>
#include <dds/sub/ddssub.hpp>
#include <dds/core/ddscore.hpp>
#include <dds/domain/ddsdomain.hpp>     // for sub to ignore pubs from same participant
#include <rti/util/util.hpp>            // for sleep()
#include "turtle_shape_typesPlugin.hpp"


// struct array element to hold received data
struct rcv_shape_t {
    bool        isNew;          // set to true on new data
    int32_t     x;
    int32_t     y;
    int32_t     size;
    float       angle;
    std::string color;
};

// bitfield enumeration to enable components 
enum shapesdemo_comp_enable {
    SHAPESDEMO_PUB_ON,
    SHAPESDEMO_SUB_ON
};

/** ----------------------------------------------------------------
 * shapesdemo class
 * This class supports ShapeType data topics used by Shapes Demo
 * ------------------------------------------------------------- **/
class shapesdemo
{
public:
    shapesdemo(const std::string shapeName, uint32_t opt_en, dds::domain::DomainParticipant participant,
        int(*rcv_fptr)(dds::sub::DataReader<ShapeTypeExtended>) = NULL);
    ~shapesdemo();

    void publish(void);
    
    ShapeTypeExtended *sample_to_pub(void) { return &pub_sample; }
    void datarcv_waitset(int32_t secs, uint32_t nsecs) { waitset.dispatch(dds::core::Duration(secs, nsecs)); }
    rcv_shape_t *get_shape_array(void) { return(&shape_data[0]); }

    // marker data sample accessors
    void pub_sample_xy_set(int32_t x, int32_t y) {
        pub_sample.x(x);
        pub_sample.y(y);
    }
    void pub_sample_xysize_set(int32_t x, int32_t y, int32_t sz) {
        pub_sample.x(x);
        pub_sample.y(y);
        pub_sample.shapesize(sz);
    }
    void pub_sample_color_set(std::string color) {
        pub_sample.color(color);
    }


private:
    // DDS receive data handler
    int rcv_dataProc(dds::sub::DataReader<ShapeTypeExtended> & reader);

    // DDS Topic, DataWriter, DataReader, Sample(for publish)
    dds::topic::Topic<ShapeTypeExtended> pub_topic;
    dds::topic::Topic<ShapeTypeExtended> sub_topic;
    dds::pub::DataWriter<ShapeTypeExtended> data_wr;
    dds::sub::DataReader<ShapeTypeExtended> data_rd;
    ShapeTypeExtended pub_sample;

    // misc
    dds::core::cond::WaitSet waitset;
    int data_rcv_count;
    rcv_shape_t shape_data[8];
    std::vector<std::string> shape_colors;
};
#endif  // ndef __SHAPESDEMO_SUPPORT_HPP__