/** ==================================================================
 * FILE: cros2_occupancygrid_support.cxx
 * Class for interfacing a native Connext DDS application with the 
 *  ROS 2 nav_msgs::msg::dds_::OccupancyGrid_ data type.
 * This program uses the C++11 option of RTIDDSGen, using the type
 *  support source code generated by the command line:
 *   rtiddsgen -language C++11 <typedef-file.idl>
 **/
#include "cros2_occupancygrid_support.hpp"

 /*ci
  * \brief cros2gridcells class constructor
  *
  * \details
  * Instantiate a nav_msgs::msg::dds_::OccupancyGrid_ publisher 
  * and/or subscriber with supporting writer, reader, topic, etc.
  *
  * \param[in]    ogridName    Name of the DDS topic
  * \param[in]    opt_en       bitfield of options (pub, sub) to enable
  * \param[in]    participant  DDS participant, already created
  */
cros2occupancygrid::cros2occupancygrid(const std::string ogridName, uint32_t opt_en, dds::domain::DomainParticipant participant) :
    data_topic(dds::core::null), pub_sample(),
    data_wr(dds::core::null), data_rd(dds::core::null),
    waitset()
{
    // create topic (pub or sub)
    const std::string data_topname("rt/" + ogridName);
    data_topic = dds::topic::Topic<nav_msgs::msg::dds_::OccupancyGrid_>(participant, data_topname);

    if (opt_en & (1 << CROS2_PUB_ON)) {
        // DataWriter
        data_wr = dds::pub::DataWriter<nav_msgs::msg::dds_::OccupancyGrid_>(dds::pub::Publisher(participant), data_topic);
    }

    if (opt_en & (1 << CROS2_SUB_ON)) {
        // DataReader, ReadCondition, WaitSet
        data_rd = dds::sub::DataReader<nav_msgs::msg::dds_::OccupancyGrid_>(dds::sub::Subscriber(participant), data_topic);
        dds::sub::cond::ReadCondition data_readCond(
            data_rd, dds::sub::status::DataState::any(),
            [this](/* dds::core::cond::Condition condition */)
        {
            data_rcv_count += rcv_dataProc(data_rd);
        }
        );
        waitset += data_readCond;
    }
}

// Receive data handler
int cros2occupancygrid::rcv_dataProc(dds::sub::DataReader<nav_msgs::msg::dds_::OccupancyGrid_>& reader)
{
    int count = 0;
    dds::sub::LoanedSamples<nav_msgs::msg::dds_::OccupancyGrid_> samples = reader.take();
    for (const auto& sample : samples) {
        if (sample.info().valid()) {
            count++;
            //std::cout << "add " << sample.data() << std::endl;
        }
    }
    return count;
}


/*ci
 * \brief Publish the OccupancyGrid_ topic.
 *
 * \details
 * Timestamp and publish the OccupancyGrid_ topic
 *
 */
void cros2occupancygrid::publish(void)
{ 
    timespec ts;
    tstamp_get(&ts);
    pub_sample.header().stamp().sec((int32_t)ts.tv_sec);
    pub_sample.header().stamp().nanosec(ts.tv_nsec);
    data_wr.write(pub_sample); 
}

/*ci
 * \brief Scale and publish an RGB8 image buffer
 *
 * \details
 * Given an RGB8 image in a buffer (plus x,y resolution), will scale
 * the image down to fit within the topic send buffer by doing a reduction
 * in pixels with averaged colors rendered in grayscale (99-0)
 *
 * \param[inout] imgBuf Image buffer, in a 3-byte R,G,B sequence.
 * \param[in]    inX    X (horiz) resolution of the input image
 * \param[in]    inY    Y (vert) resolution of the input image
 *
 * \return       void
 */
void cros2occupancygrid::publish_scaled(uint8_t *imgBuf, uint32_t inX, uint32_t inY)
{
    uint8_t *sendBuf = getDataPtr();
    uint32_t pub_img_x = pub_sample_width_get();
    uint32_t pub_img_y = pub_sample_height_get();
    float factor_X = (((float)inX) / pub_img_x);
    float factor_Y = (((float)inY) / pub_img_y);
    uint32_t ipX = 0;
    uint32_t ipY = 0;
    uint32_t addPad = ((inX * 3) % 4);
    if (addPad) addPad = 4 - addPad;
    for (uint32_t outY = 0; outY < pub_img_y; outY++) {
        for (uint32_t outX = 0; outX < pub_img_x; outX++) {
            // for each outX, get the average of the pixels in the factor_x x factor_y area nearby
            uint32_t pixSum = 0;
            uint32_t pixCnt = 0;
            ipX = (uint32_t)(outX * factor_X);
            uint32_t iStopX = (uint32_t)((outX + 1) * factor_X);
            ipY = (uint32_t)(outY * factor_Y);
            uint32_t iStopY = (uint32_t)((outY + 1) * factor_Y);
            for (; ipY < iStopY; ipY++) {
                for (uint32_t itX = ipX; itX < iStopX; itX++) {
                    pixSum += imgBuf[(ipY * inX * 3) + (itX * 3) + (addPad * ipY)];
                    pixSum += imgBuf[(ipY * inX * 3) + (itX * 3) + (addPad * ipY) + 1];
                    pixSum += imgBuf[(ipY * inX * 3) + (itX * 3) + (addPad * ipY) + 2];
                    pixCnt++;
                }
            }
            // average, invert and scale to 99--0 range (black--white)
            sendBuf[(outY * pub_img_x) + outX] = (uint8_t)((765.0F - (((float)pixSum) / pixCnt)) / 7.7273F);
        }
    }
    publish();
    return;
}

// destructor
cros2occupancygrid::~cros2occupancygrid() {}
