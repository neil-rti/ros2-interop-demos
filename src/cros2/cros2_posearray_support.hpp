/** ==================================================================
 * cros2_posearray_support.hpp
 * Class for interfacing a native Connext DDS application with the 
 *  ROS 2 geometry_msgs::msg::dds_::PoseArray_ data type.
 * This program uses the C++11 option of RTIDDSGen, using the type
 *  support source code generated by the command line:
 *   rtiddsgen -language C++11 <arch> cros2_types.idl
 **/

#ifndef __CROS2_POSEARRAY_SUPPORT_HPP__
#define __CROS2_POSEARRAY_SUPPORT_HPP__
#include "cros2_common.hpp"             // common includes and defs
#include "geometry_msgs/msg/PoseArrayPlugin.hpp"

/** ----------------------------------------------------------------
 * cros2posearray class
 * This class supports ROS2 posearray
 * ------------------------------------------------------------- **/
class cros2posearray
{
public:
    cros2posearray(const std::string posearrayName, uint32_t opt_en, dds::domain::DomainParticipant participant,
        int(*rcv_fptr)(dds::sub::DataReader<geometry_msgs::msg::dds_::PoseArray_>) = NULL);
    ~cros2posearray();


    void publish(void);
    geometry_msgs::msg::dds_::PoseArray_ *sample_to_pub(void) { return &pub_sample; }

    // posearray data sample accessors
    void pub_sample_header_tstamp_set(int32_t newSec, uint32_t newNanosec) { 
        pub_sample.header().stamp().sec(newSec); 
        pub_sample.header().stamp().nanosec(newNanosec);
    }
    void pub_sample_header_frameid_set(const std::string newId) { pub_sample.header().frame_id(newId); }
    void pub_sample_pose_array_size_set(uint32_t newLen) { pub_sample.poses().resize(newLen); }
    geometry_msgs::msg::dds_::Pose_ *pub_sample_pose_array_getptr(void) { return pub_sample.poses().data(); }

    int data_rcv_count_get(void) { return data_rcv_count; }

private:
    // DDS receive data handler
    int rcv_dataProc(dds::sub::DataReader<geometry_msgs::msg::dds_::PoseArray_> & reader);

    // DDS Topic, DataWriter, DataReader, Sample(for publish)
    dds::topic::Topic<geometry_msgs::msg::dds_::PoseArray_> data_topic;
    dds::pub::DataWriter<geometry_msgs::msg::dds_::PoseArray_> data_wr;
    dds::sub::DataReader<geometry_msgs::msg::dds_::PoseArray_> data_rd;
    geometry_msgs::msg::dds_::PoseArray_ pub_sample;

    // misc
    dds::core::cond::WaitSet waitset;
    int data_rcv_count;
};
#endif  // ndef __CROS2_POSEARRAY_SUPPORT_HPP__