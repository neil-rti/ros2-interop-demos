/** ==================================================================
 * cros2_turtlesim_support.hpp
 * Class for interfacing a native Connext DDS application with the 
 *  ROS 2 'Turtlesim' application (as of the 'eloquent' release).
 * This program uses the C++11 option of RTIDDSGen, using the type
 *  support source code generated by the command line:
 *   rtiddsgen -language C++11 <arch> cros2_types.idl
 **/

#ifndef __CROS2_TURTLESIM_SUPPORT_HPP__
#define __CROS2_TURTLESIM_SUPPORT_HPP__
#include <map>
#include <dds/pub/ddspub.hpp>
#include <dds/sub/ddssub.hpp>
#include <dds/core/ddscore.hpp>
#include <dds/domain/ddsdomain.hpp>     // for sub to ignore pubs from same participant
#include <rti/util/util.hpp>            // for sleep()
#include "turtlesim/msg/PosePlugin.hpp"
#include "turtlesim/msg/ColorPlugin.hpp"
#include "geometry_msgs/msg/TwistPlugin.hpp"
#include "turtlesim/srv/Spawn_RequestPlugin.hpp"
#include "turtlesim/srv/Spawn_ResponsePlugin.hpp"
#include "turtlesim/srv/Kill_RequestPlugin.hpp"
#include "turtlesim/srv/Kill_ResponsePlugin.hpp"
#include "turtlesim/srv/TeleportAbsolute_RequestPlugin.hpp"
#include "turtlesim/srv/TeleportAbsolute_ResponsePlugin.hpp"
#include "turtlesim/srv/TeleportRelative_RequestPlugin.hpp"
#include "turtlesim/srv/TeleportRelative_ResponsePlugin.hpp"
#include "turtlesim/srv/SetPen_RequestPlugin.hpp"
#include "turtlesim/srv/SetPen_ResponsePlugin.hpp"
#include "turtlesim/action/RotateAbsolute_SendGoal_RequestPlugin.hpp"
#include "turtlesim/action/RotateAbsolute_SendGoal_ResponsePlugin.hpp"
#include "turtlesim/action/RotateAbsolute_GetResult_RequestPlugin.hpp"
#include "turtlesim/action/RotateAbsolute_GetResult_ResponsePlugin.hpp"
#include "turtlesim/action/RotateAbsolute_FeedbackMessagePlugin.hpp"
#include "std_srvs/srv/Empty_RequestPlugin.hpp"
#include "std_srvs/srv/Empty_ResponsePlugin.hpp"
/** ----------------------------------------------------------------
 * turtleapp class
 * This class supports ROS2 turtlesim with methods that are not 
 *  tied to a specific turtle:
 *  Spawn, Kill, Clear, Reset, Parameters and Logging
 * See 'turtleinst' class for specific-turtle methods.
 * ------------------------------------------------------------- **/
class turtleapp
{
public:
    turtleapp(dds::domain::DomainParticipant participant);
    ~turtleapp();
    // prototypes
    void clear_screen(void);
    void spawn_turtle(std::string turtleName, float x, float y);
    void retire_turtle(std::string turtleName);
    void datarcv_waitset(int32_t secs, uint32_t nsecs) { waitset.dispatch(dds::core::Duration(secs, nsecs)); }


private:
    // prototypes for receive data handlers
    int tadd_dataProc(dds::sub::DataReader<turtlesim::srv::dds_::Spawn_Response_>& reader);
    int tsub_dataProc(dds::sub::DataReader<turtlesim::srv::dds_::Kill_Response_>& reader);
    int tclr_dataProc(dds::sub::DataReader<std_srvs::srv::dds_::Empty_Response_>& reader);

    // DDS Topics
    dds::topic::Topic<turtlesim::srv::dds_::Spawn_Request_> tadd_rq_topic;
    dds::topic::Topic<turtlesim::srv::dds_::Spawn_Response_> tadd_rr_topic;
    dds::topic::Topic<turtlesim::srv::dds_::Kill_Request_> tsub_rq_topic;
    dds::topic::Topic<turtlesim::srv::dds_::Kill_Response_> tsub_rr_topic;
    dds::topic::Topic<std_srvs::srv::dds_::Empty_Request_> tclr_rq_topic;
    dds::topic::Topic<std_srvs::srv::dds_::Empty_Response_> tclr_rr_topic;

    // DataWriters for DDS topics 
    dds::pub::DataWriter<turtlesim::srv::dds_::Spawn_Request_> tadd_rq_wr;
    dds::pub::DataWriter<turtlesim::srv::dds_::Kill_Request_> tsub_rq_wr;
    dds::pub::DataWriter<std_srvs::srv::dds_::Empty_Request_> tclr_rq_wr;

    // DataReaders for DDS topics 
    dds::sub::DataReader<turtlesim::srv::dds_::Spawn_Response_> tadd_rr_rd;
    dds::sub::DataReader<turtlesim::srv::dds_::Kill_Response_> tsub_rr_rd;
    dds::sub::DataReader<std_srvs::srv::dds_::Empty_Response_> tclr_rr_rd;

    // DDS samples for writing
    turtlesim::srv::dds_::Spawn_Request_ tadd_rq_sample;
    turtlesim::srv::dds_::Kill_Request_ tsub_rq_sample;
    std_srvs::srv::dds_::Empty_Request_ tclr_rq_sample;

    // misc
    dds::core::cond::WaitSet waitset;
    int spawn_resp_count;
    int retire_resp_count;
    int clear_resp_count;
};


// bitfield position enum for enabling different parts of turtleinst support
enum turtleinst_enable {
    MOVE_PUB = 0,                   // move/turn the turtle (message)
    TELEPORT_ABS,                   // teleport absolute (service)
    TELEPORT_REL,                   // teleport relative (service)
    ROTATE_ABS,                     // rotate absolute (action)
    PEN_SET,                        // set pen (service)
    POSE_SUB,                       // read pose/current position (message)
    COLOR_SUB                       // read color (message)
};

/** ----------------------------------------------------------------
 * turtleinst class
 * This class supports specific (named) turtle instances:
 *  move, rotate, teleport, pen, color and pose.
 * ------------------------------------------------------------- **/
class turtleinst
{
public:
    turtleinst(const std::string turtleName, uint32_t opt_dis, dds::domain::DomainParticipant participant);
    ~turtleinst();

    // prototypes
    void turtle_pen_set(bool ink_on);
    void turtle_pen_set(uint8_t lineWidth);
    void turtle_pen_set(uint32_t rgb8_color);
    void turtle_pen_set(uint32_t rgb8_color, uint8_t lineWidth);
    void turtle_teleport_xy(float x, float y);
    void datarcv_waitset(int32_t secs, uint32_t nsecs) { waitset.dispatch(dds::core::Duration(secs, nsecs)); }
    void turtle_move_and_turn(double forward, double turn);

    // robot 'pose'
    struct rpose {
        float x;
        float y;
        float theta;
        float lvel;
        float avel;
        int poseCount;
        bool isNew;
    }myPose;

private:
    // prototypes for receive data handlers
    int ttpa_dataProc(dds::sub::DataReader<turtlesim::srv::dds_::TeleportAbsolute_Response_>& reader);
    int ttpr_dataProc(dds::sub::DataReader<turtlesim::srv::dds_::TeleportRelative_Response_>& reader);
    int trot_goal_dataProc(dds::sub::DataReader<turtlesim::action::dds_::RotateAbsolute_SendGoal_Response_>& reader);
    int trot_res_dataProc(dds::sub::DataReader<turtlesim::action::dds_::RotateAbsolute_GetResult_Response_>& reader);
    int trot_fb_dataProc(dds::sub::DataReader<turtlesim::action::dds_::RotateAbsolute_FeedbackMessage_>& reader);
    int tpen_dataProc(dds::sub::DataReader<turtlesim::srv::dds_::SetPen_Response_>& reader);
    int tpos_dataProc(dds::sub::DataReader<turtlesim::msg::dds_::Pose_>& reader);
    int tcolor_dataProc(dds::sub::DataReader<turtlesim::msg::dds_::Color_>& reader);

    // DDS Topics
    dds::topic::Topic<geometry_msgs::msg::dds_::Twist_> tmov_topic;
    dds::topic::Topic<turtlesim::srv::dds_::TeleportAbsolute_Request_> ttpa_rq_topic;
    dds::topic::Topic<turtlesim::srv::dds_::TeleportAbsolute_Response_> ttpa_rr_topic;
    dds::topic::Topic<turtlesim::srv::dds_::TeleportRelative_Request_> ttpr_rq_topic;
    dds::topic::Topic<turtlesim::srv::dds_::TeleportRelative_Response_> ttpr_rr_topic;
    dds::topic::Topic<turtlesim::srv::dds_::SetPen_Request_> tpen_rq_topic;
    dds::topic::Topic<turtlesim::srv::dds_::SetPen_Response_> tpen_rr_topic;
    dds::topic::Topic<turtlesim::action::dds_::RotateAbsolute_SendGoal_Request_> trot_goal_rq_topic;
    dds::topic::Topic<turtlesim::action::dds_::RotateAbsolute_SendGoal_Response_> trot_goal_rr_topic;
    dds::topic::Topic<turtlesim::action::dds_::RotateAbsolute_GetResult_Request_> trot_res_rq_topic;
    dds::topic::Topic<turtlesim::action::dds_::RotateAbsolute_GetResult_Response_> trot_res_rr_topic;
    dds::topic::Topic<turtlesim::action::dds_::RotateAbsolute_FeedbackMessage_> trot_fb_topic;
    dds::topic::Topic<turtlesim::msg::dds_::Pose_> tpos_topic;
    dds::topic::Topic<turtlesim::msg::dds_::Color_> tcolor_topic;

    // DataWriters for DDS topics 
    dds::pub::DataWriter<turtlesim::action::dds_::RotateAbsolute_SendGoal_Request_> trot_goal_wr;
    dds::pub::DataWriter<turtlesim::action::dds_::RotateAbsolute_GetResult_Request_> trot_res_wr;
    dds::pub::DataWriter<turtlesim::srv::dds_::TeleportAbsolute_Request_> ttpa_rq_wr;
    dds::pub::DataWriter<turtlesim::srv::dds_::TeleportRelative_Request_> ttpr_rq_wr;
    dds::pub::DataWriter<turtlesim::srv::dds_::SetPen_Request_> tpen_rq_wr;
    dds::pub::DataWriter<geometry_msgs::msg::dds_::Twist_> tmov_wr;

    // DataReaders for DDS topics 
    dds::sub::DataReader<turtlesim::action::dds_::RotateAbsolute_SendGoal_Response_> trot_goal_rr_rd;
    dds::sub::DataReader<turtlesim::action::dds_::RotateAbsolute_GetResult_Response_> trot_res_rr_rd;
    dds::sub::DataReader<turtlesim::action::dds_::RotateAbsolute_FeedbackMessage_> trot_fb_rd;
    dds::sub::DataReader<turtlesim::srv::dds_::TeleportAbsolute_Response_> ttpa_rr_rd;
    dds::sub::DataReader<turtlesim::srv::dds_::TeleportRelative_Response_> ttpr_rr_rd;
    dds::sub::DataReader<turtlesim::srv::dds_::SetPen_Response_> tpen_rr_rd;
    dds::sub::DataReader<turtlesim::msg::dds_::Pose_> tpos_rd;
    dds::sub::DataReader<turtlesim::msg::dds_::Color_> tcolor_rd;

    // DDS samples for writing
    geometry_msgs::msg::dds_::Twist_ tmov_sample;
    turtlesim::srv::dds_::TeleportAbsolute_Request_ ttpa_rq_sample;
    turtlesim::srv::dds_::TeleportRelative_Request_ ttpr_rq_sample;
    turtlesim::srv::dds_::SetPen_Request_ tpen_rq_sample;

    // misc
    dds::core::cond::WaitSet waitset;
    int pose_rcv_count;
    int tele_abs_resp_count;
    int tele_rel_resp_count;
    int move_resp_count;
    int pen_resp_count;
    int trot_goal_resp_count;
    int trot_res_resp_count;
    int trot_fb_count;
    int tcolor_rcv_count;
    std::string myInstName;
    uint32_t op_delay_nsecs;
    uint32_t op_waitset_timeout_nsecs;

};
#endif  // ndef __CROS2_TURTLESIM_SUPPORT_HPP__