/** ==================================================================
 * cros2_fluidpressure_support.hpp
 * Class for interfacing a native Connext DDS application with the 
 *  ROS 2 sensor_msgs::msg::dds_::fluidpressure_ data type.
 * This program uses the C++11 option of RTIDDSGen, using the type
 *  support source code generated by the command line:
 *   rtiddsgen -language C++11 <arch> cros2_types.idl
 **/

#ifndef __CROS2_FLUIDPRESSURE_SUPPORT_HPP__
#define __CROS2_FLUIDPRESSURE_SUPPORT_HPP__
#include "cros2_common.hpp"             // common includes and defs
#include "sensor_msgs/msg/FluidPressurePlugin.hpp"

/** ----------------------------------------------------------------
 * cros2fluidpressure class
 * This class supports ROS2 fluidpressure
 * ------------------------------------------------------------- **/
class cros2fluidpressure
{
public:
    cros2fluidpressure(const std::string fluidpressureName, uint32_t opt_en, dds::domain::DomainParticipant participant,
        int(*rcv_fptr)(dds::sub::DataReader<sensor_msgs::msg::dds_::FluidPressure_>) = NULL);
    ~cros2fluidpressure();


    void publish(void);
    sensor_msgs::msg::dds_::FluidPressure_ *pub_sample_get_ptr(void) { return &pub_sample; }

    // fluidpressure data sample accessors
    void pub_sample_header_tstamp_set(int32_t newSec, uint32_t newNanosec) { 
        pub_sample.header().stamp().sec(newSec); 
        pub_sample.header().stamp().nanosec(newNanosec);
    }
    void pub_sample_header_frameid_set(const std::string newId) { pub_sample.header().frame_id(newId); }
    void pub_sample_fluid_pressure_set(double newPressure) { pub_sample.fluid_pressure(newPressure); }
    void pub_sample_variance_set(double newVariance) { pub_sample.variance(newVariance); }
    int data_rcv_count_get(void) { return data_rcv_count; }

private:
    // DDS receive data handler
    int rcv_dataProc(dds::sub::DataReader<sensor_msgs::msg::dds_::FluidPressure_> & reader);

    // DDS Topic, DataWriter, DataReader, Sample(for publish)
    dds::topic::Topic<sensor_msgs::msg::dds_::FluidPressure_> data_topic;
    dds::pub::DataWriter<sensor_msgs::msg::dds_::FluidPressure_> data_wr;
    dds::sub::DataReader<sensor_msgs::msg::dds_::FluidPressure_> data_rd;
    sensor_msgs::msg::dds_::FluidPressure_ pub_sample;

    // misc
    dds::core::cond::WaitSet waitset;
    int data_rcv_count;
};
#endif  // ndef __CROS2_FLUIDPRESSURE_SUPPORT_HPP__